# Default values for app chart
replicaCount: 2

image:
  repository: localhost:8081/app
  tag: latest
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: app.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: app-tls
      hosts:
        - app.example.com

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

env:
  - name: SPRING_PROFILES_ACTIVE
    value: "kubernetes"
  - name: LOG_LEVEL
    value: "INFO"
  - name: METRICS_ENABLED
    value: "true"

configMap:
  enabled: true
  data:
    application.yml: |
      spring:
        application:
          name: app
        profiles:
          active: kubernetes
        datasource:
          url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
          username: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
        redis:
          host: ${REDIS_HOST}
          port: ${REDIS_PORT}
        cloud:
          kubernetes:
            enabled: true
      management:
        endpoints:
          web:
            exposure:
              include: health,info,metrics,prometheus
        endpoint:
          health:
            show-details: always
      logging:
        level:
          root: INFO
          com.example: DEBUG

secret:
  enabled: true
  data:
    POSTGRES_PASSWORD: "{{ .Values.postgresql.auth.postgresPassword | b64enc }}"
    REDIS_PASSWORD: "{{ .Values.redis.auth.password | b64enc }}"

volumes:
  - name: config-volume
    configMap:
      name: {{ include "app.fullname" . }}-config

volumeMounts:
  - name: config-volume
    mountPath: /app/config

livenessProbe:
  httpGet:
    path: /actuator/health
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /actuator/health
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /actuator/health
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres123"
    database: "appdb"
  primary:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi

# Redis configuration
redis:
  enabled: true
  auth:
    password: "redis123"
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /actuator/prometheus
  prometheusRule:
    enabled: true

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: 7
  storage:
    type: s3
    bucket: "app-backups"
    region: "us-west-2"

# Security configuration
security:
  enabled: true
  networkPolicy:
    enabled: true
  podSecurityPolicy:
    enabled: true
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
    capabilities:
      drop:
        - ALL

